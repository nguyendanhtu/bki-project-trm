///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the view 'V_GD_THANH_TOAN_DETAIL'
// Generated by LLBLGen v1.21.2003.712 Final on: Thursday, November 17, 2011, 3:36:59 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace TRMLLBL
{
	/// <summary>
	/// Purpose: Data Access class for the view 'V_GD_THANH_TOAN_DETAIL'.
	/// </summary>
	public class V_GD_THANH_TOAN_DETAIL : DBInteractionBase
	{
		#region Class Member Declarations
			private SqlDecimal		_iD_NOI_DUNG_THANH_TOAN, _sO_LUONG_HE_SO, _dON_GIA_TT, _iD_HOP_DONG_KHUNG, _iD, _iD_GD_THANH_TOAN;
			private SqlString		_mA_TAN_SUAT, _tAN_SUAT, _rEFERENCE_CODE, _nOI_DUNG_THANH_TOAN, _dESCRIPTION, _dON_VI_TINH, _mA_DON_VI_TINH;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public V_GD_THANH_TOAN_DETAIL()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID_GD_THANH_TOAN</LI>
		///		 <LI>DESCRIPTION. May be SqlString.Null</LI>
		///		 <LI>ID_HOP_DONG_KHUNG. May be SqlDecimal.Null</LI>
		///		 <LI>ID_NOI_DUNG_THANH_TOAN</LI>
		///		 <LI>NOI_DUNG_THANH_TOAN. May be SqlString.Null</LI>
		///		 <LI>SO_LUONG_HE_SO</LI>
		///		 <LI>MA_DON_VI_TINH. May be SqlString.Null</LI>
		///		 <LI>DON_VI_TINH. May be SqlString.Null</LI>
		///		 <LI>MA_TAN_SUAT. May be SqlString.Null</LI>
		///		 <LI>TAN_SUAT. May be SqlString.Null</LI>
		///		 <LI>DON_GIA_TT</LI>
		///		 <LI>REFERENCE_CODE. May be SqlString.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ID</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_V_GD_THANH_TOAN_DETAIL_Insert]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_GD_THANH_TOAN", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_GD_THANH_TOAN));
				cmdToExecute.Parameters.Add(new SqlParameter("@DESCRIPTION", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _dESCRIPTION));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_HOP_DONG_KHUNG", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_HOP_DONG_KHUNG));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_NOI_DUNG_THANH_TOAN", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_NOI_DUNG_THANH_TOAN));
				cmdToExecute.Parameters.Add(new SqlParameter("@NOI_DUNG_THANH_TOAN", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _nOI_DUNG_THANH_TOAN));
				cmdToExecute.Parameters.Add(new SqlParameter("@SO_LUONG_HE_SO", SqlDbType.Decimal, 13, ParameterDirection.Input, false, 21, 3, "", DataRowVersion.Proposed, _sO_LUONG_HE_SO));
				cmdToExecute.Parameters.Add(new SqlParameter("@MA_DON_VI_TINH", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _mA_DON_VI_TINH));
				cmdToExecute.Parameters.Add(new SqlParameter("@DON_VI_TINH", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _dON_VI_TINH));
				cmdToExecute.Parameters.Add(new SqlParameter("@MA_TAN_SUAT", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _mA_TAN_SUAT));
				cmdToExecute.Parameters.Add(new SqlParameter("@TAN_SUAT", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _tAN_SUAT));
				cmdToExecute.Parameters.Add(new SqlParameter("@DON_GIA_TT", SqlDbType.Decimal, 13, ParameterDirection.Input, false, 21, 3, "", DataRowVersion.Proposed, _dON_GIA_TT));
				cmdToExecute.Parameters.Add(new SqlParameter("@REFERENCE_CODE", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _rEFERENCE_CODE));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID", SqlDbType.Decimal, 9, ParameterDirection.Output, false, 18, 1, "", DataRowVersion.Proposed, _iD));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_iD = (Decimal)cmdToExecute.Parameters["@ID"].Value;
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("V_GD_THANH_TOAN_DETAIL::Insert::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		#region Class Property Declarations
		public SqlDecimal ID
		{
			get
			{
				return _iD;
			}
			set
			{
				SqlDecimal iDTmp = (SqlDecimal)value;
				if(iDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID", "ID can't be NULL");
				}
				_iD = value;
			}
		}


		public SqlDecimal ID_GD_THANH_TOAN
		{
			get
			{
				return _iD_GD_THANH_TOAN;
			}
			set
			{
				SqlDecimal iD_GD_THANH_TOANTmp = (SqlDecimal)value;
				if(iD_GD_THANH_TOANTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_GD_THANH_TOAN", "ID_GD_THANH_TOAN can't be NULL");
				}
				_iD_GD_THANH_TOAN = value;
			}
		}


		public SqlString DESCRIPTION
		{
			get
			{
				return _dESCRIPTION;
			}
			set
			{
				SqlString dESCRIPTIONTmp = (SqlString)value;
				if(dESCRIPTIONTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("DESCRIPTION", "DESCRIPTION can't be NULL");
				}
				_dESCRIPTION = value;
			}
		}


		public SqlDecimal ID_HOP_DONG_KHUNG
		{
			get
			{
				return _iD_HOP_DONG_KHUNG;
			}
			set
			{
				SqlDecimal iD_HOP_DONG_KHUNGTmp = (SqlDecimal)value;
				if(iD_HOP_DONG_KHUNGTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_HOP_DONG_KHUNG", "ID_HOP_DONG_KHUNG can't be NULL");
				}
				_iD_HOP_DONG_KHUNG = value;
			}
		}


		public SqlDecimal ID_NOI_DUNG_THANH_TOAN
		{
			get
			{
				return _iD_NOI_DUNG_THANH_TOAN;
			}
			set
			{
				SqlDecimal iD_NOI_DUNG_THANH_TOANTmp = (SqlDecimal)value;
				if(iD_NOI_DUNG_THANH_TOANTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_NOI_DUNG_THANH_TOAN", "ID_NOI_DUNG_THANH_TOAN can't be NULL");
				}
				_iD_NOI_DUNG_THANH_TOAN = value;
			}
		}


		public SqlString NOI_DUNG_THANH_TOAN
		{
			get
			{
				return _nOI_DUNG_THANH_TOAN;
			}
			set
			{
				SqlString nOI_DUNG_THANH_TOANTmp = (SqlString)value;
				if(nOI_DUNG_THANH_TOANTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("NOI_DUNG_THANH_TOAN", "NOI_DUNG_THANH_TOAN can't be NULL");
				}
				_nOI_DUNG_THANH_TOAN = value;
			}
		}


		public SqlDecimal SO_LUONG_HE_SO
		{
			get
			{
				return _sO_LUONG_HE_SO;
			}
			set
			{
				SqlDecimal sO_LUONG_HE_SOTmp = (SqlDecimal)value;
				if(sO_LUONG_HE_SOTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("SO_LUONG_HE_SO", "SO_LUONG_HE_SO can't be NULL");
				}
				_sO_LUONG_HE_SO = value;
			}
		}


		public SqlString MA_DON_VI_TINH
		{
			get
			{
				return _mA_DON_VI_TINH;
			}
			set
			{
				SqlString mA_DON_VI_TINHTmp = (SqlString)value;
				if(mA_DON_VI_TINHTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("MA_DON_VI_TINH", "MA_DON_VI_TINH can't be NULL");
				}
				_mA_DON_VI_TINH = value;
			}
		}


		public SqlString DON_VI_TINH
		{
			get
			{
				return _dON_VI_TINH;
			}
			set
			{
				SqlString dON_VI_TINHTmp = (SqlString)value;
				if(dON_VI_TINHTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("DON_VI_TINH", "DON_VI_TINH can't be NULL");
				}
				_dON_VI_TINH = value;
			}
		}


		public SqlString MA_TAN_SUAT
		{
			get
			{
				return _mA_TAN_SUAT;
			}
			set
			{
				SqlString mA_TAN_SUATTmp = (SqlString)value;
				if(mA_TAN_SUATTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("MA_TAN_SUAT", "MA_TAN_SUAT can't be NULL");
				}
				_mA_TAN_SUAT = value;
			}
		}


		public SqlString TAN_SUAT
		{
			get
			{
				return _tAN_SUAT;
			}
			set
			{
				SqlString tAN_SUATTmp = (SqlString)value;
				if(tAN_SUATTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("TAN_SUAT", "TAN_SUAT can't be NULL");
				}
				_tAN_SUAT = value;
			}
		}


		public SqlDecimal DON_GIA_TT
		{
			get
			{
				return _dON_GIA_TT;
			}
			set
			{
				SqlDecimal dON_GIA_TTTmp = (SqlDecimal)value;
				if(dON_GIA_TTTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("DON_GIA_TT", "DON_GIA_TT can't be NULL");
				}
				_dON_GIA_TT = value;
			}
		}


		public SqlString REFERENCE_CODE
		{
			get
			{
				return _rEFERENCE_CODE;
			}
			set
			{
				SqlString rEFERENCE_CODETmp = (SqlString)value;
				if(rEFERENCE_CODETmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("REFERENCE_CODE", "REFERENCE_CODE can't be NULL");
				}
				_rEFERENCE_CODE = value;
			}
		}
		#endregion
	}
}
