///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the view 'V_CONTACT_PROFILE'
// Generated by LLBLGen v1.21.2003.712 Final on: Wednesday, September 28, 2011, 6:16:14 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace TRMLLBL
{
	/// <summary>
	/// Purpose: Data Access class for the view 'V_CONTACT_PROFILE'.
	/// </summary>
	public class V_CONTACT_PROFILE : DBInteractionBase
	{
		#region Class Member Declarations
			private SqlDateTime		_cREATE_DATE, _bIRDAY, _eVENT_DATE;
			private SqlDecimal		_iD_CONTACT_SOURCE, _iD_PERSONAL_SOURCE, _iD_RESIDENT_CITY, _iD_LIVING_CITY_NAME, _iD_TRAINING_PROJECT, _lEVEL_MODE, _gROUP_ID, _iD_CURENT_MANAGER, _iD_CREATE_BY, _iD, _iD_OFFICE_CITY;
			private SqlString		_nOTE7, _nOTE6, _nOTE8, _nOTE3, _nOTE2, _nOTE5, _nOTE4, _rEPLY_CONTENT, _nOTE, _mA_PHAN_NHOM, _sENT_CONTENT, _nOTE9, _nGUOI_QUAN_LY, _nOTE10, _rESIDENT_ADDRESS, _oFFICE_ADDRESS, _lIVING_ADDRESS, _hOME_PHONE, _mOBILE, _eMAIL, _oFFICE_PHONE, _oFFICE_NAME, _fIRST_CONTACT_NAME, _cODE, _nOTE1, _lAST_CONTACT_NAME, _jOB_NAME, _mARRIAGE_STATUS_YN, _sEX_YN;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public V_CONTACT_PROFILE()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID</LI>
		///		 <LI>CODE</LI>
		///		 <LI>FIRST_CONTACT_NAME. May be SqlString.Null</LI>
		///		 <LI>LAST_CONTACT_NAME. May be SqlString.Null</LI>
		///		 <LI>BIRDAY. May be SqlDateTime.Null</LI>
		///		 <LI>SEX_YN. May be SqlString.Null</LI>
		///		 <LI>MARRIAGE_STATUS_YN. May be SqlString.Null</LI>
		///		 <LI>JOB_NAME. May be SqlString.Null</LI>
		///		 <LI>OFFICE_NAME. May be SqlString.Null</LI>
		///		 <LI>ID_OFFICE_CITY. May be SqlDecimal.Null</LI>
		///		 <LI>OFFICE_ADDRESS. May be SqlString.Null</LI>
		///		 <LI>HOME_PHONE. May be SqlString.Null</LI>
		///		 <LI>MOBILE. May be SqlString.Null</LI>
		///		 <LI>EMAIL. May be SqlString.Null</LI>
		///		 <LI>OFFICE_PHONE. May be SqlString.Null</LI>
		///		 <LI>ID_RESIDENT_CITY. May be SqlDecimal.Null</LI>
		///		 <LI>RESIDENT_ADDRESS. May be SqlString.Null</LI>
		///		 <LI>ID_LIVING_CITY_NAME. May be SqlDecimal.Null</LI>
		///		 <LI>LIVING_ADDRESS. May be SqlString.Null</LI>
		///		 <LI>ID_CONTACT_SOURCE. May be SqlDecimal.Null</LI>
		///		 <LI>ID_PERSONAL_SOURCE. May be SqlDecimal.Null</LI>
		///		 <LI>ID_TRAINING_PROJECT. May be SqlDecimal.Null</LI>
		///		 <LI>ID_CURENT_MANAGER. May be SqlDecimal.Null</LI>
		///		 <LI>ID_CREATE_BY. May be SqlDecimal.Null</LI>
		///		 <LI>CREATE_DATE. May be SqlDateTime.Null</LI>
		///		 <LI>LEVEL_MODE. May be SqlDecimal.Null</LI>
		///		 <LI>GROUP_ID. May be SqlDecimal.Null</LI>
		///		 <LI>NOTE1. May be SqlString.Null</LI>
		///		 <LI>NOTE2. May be SqlString.Null</LI>
		///		 <LI>NOTE3. May be SqlString.Null</LI>
		///		 <LI>NOTE4. May be SqlString.Null</LI>
		///		 <LI>NOTE5. May be SqlString.Null</LI>
		///		 <LI>NOTE6. May be SqlString.Null</LI>
		///		 <LI>NOTE7. May be SqlString.Null</LI>
		///		 <LI>NOTE8. May be SqlString.Null</LI>
		///		 <LI>NOTE9. May be SqlString.Null</LI>
		///		 <LI>NOTE10. May be SqlString.Null</LI>
		///		 <LI>EVENT_DATE. May be SqlDateTime.Null</LI>
		///		 <LI>SENT_CONTENT. May be SqlString.Null</LI>
		///		 <LI>REPLY_CONTENT. May be SqlString.Null</LI>
		///		 <LI>NOTE. May be SqlString.Null</LI>
		///		 <LI>MA_PHAN_NHOM. May be SqlString.Null</LI>
		///		 <LI>NGUOI_QUAN_LY. May be SqlString.Null</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_V_CONTACT_PROFILE_Insert]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD));
				cmdToExecute.Parameters.Add(new SqlParameter("@CODE", SqlDbType.NVarChar, 35, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _cODE));
				cmdToExecute.Parameters.Add(new SqlParameter("@FIRST_CONTACT_NAME", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _fIRST_CONTACT_NAME));
				cmdToExecute.Parameters.Add(new SqlParameter("@LAST_CONTACT_NAME", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _lAST_CONTACT_NAME));
				cmdToExecute.Parameters.Add(new SqlParameter("@BIRDAY", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _bIRDAY));
				cmdToExecute.Parameters.Add(new SqlParameter("@SEX_YN", SqlDbType.NVarChar, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _sEX_YN));
				cmdToExecute.Parameters.Add(new SqlParameter("@MARRIAGE_STATUS_YN", SqlDbType.NVarChar, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _mARRIAGE_STATUS_YN));
				cmdToExecute.Parameters.Add(new SqlParameter("@JOB_NAME", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _jOB_NAME));
				cmdToExecute.Parameters.Add(new SqlParameter("@OFFICE_NAME", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _oFFICE_NAME));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_OFFICE_CITY", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_OFFICE_CITY));
				cmdToExecute.Parameters.Add(new SqlParameter("@OFFICE_ADDRESS", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _oFFICE_ADDRESS));
				cmdToExecute.Parameters.Add(new SqlParameter("@HOME_PHONE", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _hOME_PHONE));
				cmdToExecute.Parameters.Add(new SqlParameter("@MOBILE", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _mOBILE));
				cmdToExecute.Parameters.Add(new SqlParameter("@EMAIL", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _eMAIL));
				cmdToExecute.Parameters.Add(new SqlParameter("@OFFICE_PHONE", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _oFFICE_PHONE));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_RESIDENT_CITY", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_RESIDENT_CITY));
				cmdToExecute.Parameters.Add(new SqlParameter("@RESIDENT_ADDRESS", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _rESIDENT_ADDRESS));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_LIVING_CITY_NAME", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_LIVING_CITY_NAME));
				cmdToExecute.Parameters.Add(new SqlParameter("@LIVING_ADDRESS", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _lIVING_ADDRESS));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_CONTACT_SOURCE", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_CONTACT_SOURCE));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_PERSONAL_SOURCE", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_PERSONAL_SOURCE));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_TRAINING_PROJECT", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_TRAINING_PROJECT));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_CURENT_MANAGER", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_CURENT_MANAGER));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_CREATE_BY", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_CREATE_BY));
				cmdToExecute.Parameters.Add(new SqlParameter("@CREATE_DATE", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _cREATE_DATE));
				cmdToExecute.Parameters.Add(new SqlParameter("@LEVEL_MODE", SqlDbType.Decimal, 5, ParameterDirection.Input, false, 6, 1, "", DataRowVersion.Proposed, _lEVEL_MODE));
				cmdToExecute.Parameters.Add(new SqlParameter("@GROUP_ID", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _gROUP_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@NOTE1", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _nOTE1));
				cmdToExecute.Parameters.Add(new SqlParameter("@NOTE2", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _nOTE2));
				cmdToExecute.Parameters.Add(new SqlParameter("@NOTE3", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _nOTE3));
				cmdToExecute.Parameters.Add(new SqlParameter("@NOTE4", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _nOTE4));
				cmdToExecute.Parameters.Add(new SqlParameter("@NOTE5", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _nOTE5));
				cmdToExecute.Parameters.Add(new SqlParameter("@NOTE6", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _nOTE6));
				cmdToExecute.Parameters.Add(new SqlParameter("@NOTE7", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _nOTE7));
				cmdToExecute.Parameters.Add(new SqlParameter("@NOTE8", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _nOTE8));
				cmdToExecute.Parameters.Add(new SqlParameter("@NOTE9", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _nOTE9));
				cmdToExecute.Parameters.Add(new SqlParameter("@NOTE10", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _nOTE10));
				cmdToExecute.Parameters.Add(new SqlParameter("@EVENT_DATE", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _eVENT_DATE));
				cmdToExecute.Parameters.Add(new SqlParameter("@SENT_CONTENT", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _sENT_CONTENT));
				cmdToExecute.Parameters.Add(new SqlParameter("@REPLY_CONTENT", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _rEPLY_CONTENT));
				cmdToExecute.Parameters.Add(new SqlParameter("@NOTE", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _nOTE));
				cmdToExecute.Parameters.Add(new SqlParameter("@MA_PHAN_NHOM", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _mA_PHAN_NHOM));
				cmdToExecute.Parameters.Add(new SqlParameter("@NGUOI_QUAN_LY", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _nGUOI_QUAN_LY));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("V_CONTACT_PROFILE::Insert::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		#region Class Property Declarations
		public SqlDecimal ID
		{
			get
			{
				return _iD;
			}
			set
			{
				SqlDecimal iDTmp = (SqlDecimal)value;
				if(iDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID", "ID can't be NULL");
				}
				_iD = value;
			}
		}


		public SqlString CODE
		{
			get
			{
				return _cODE;
			}
			set
			{
				SqlString cODETmp = (SqlString)value;
				if(cODETmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("CODE", "CODE can't be NULL");
				}
				_cODE = value;
			}
		}


		public SqlString FIRST_CONTACT_NAME
		{
			get
			{
				return _fIRST_CONTACT_NAME;
			}
			set
			{
				SqlString fIRST_CONTACT_NAMETmp = (SqlString)value;
				if(fIRST_CONTACT_NAMETmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("FIRST_CONTACT_NAME", "FIRST_CONTACT_NAME can't be NULL");
				}
				_fIRST_CONTACT_NAME = value;
			}
		}


		public SqlString LAST_CONTACT_NAME
		{
			get
			{
				return _lAST_CONTACT_NAME;
			}
			set
			{
				SqlString lAST_CONTACT_NAMETmp = (SqlString)value;
				if(lAST_CONTACT_NAMETmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("LAST_CONTACT_NAME", "LAST_CONTACT_NAME can't be NULL");
				}
				_lAST_CONTACT_NAME = value;
			}
		}


		public SqlDateTime BIRDAY
		{
			get
			{
				return _bIRDAY;
			}
			set
			{
				SqlDateTime bIRDAYTmp = (SqlDateTime)value;
				if(bIRDAYTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("BIRDAY", "BIRDAY can't be NULL");
				}
				_bIRDAY = value;
			}
		}


		public SqlString SEX_YN
		{
			get
			{
				return _sEX_YN;
			}
			set
			{
				SqlString sEX_YNTmp = (SqlString)value;
				if(sEX_YNTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("SEX_YN", "SEX_YN can't be NULL");
				}
				_sEX_YN = value;
			}
		}


		public SqlString MARRIAGE_STATUS_YN
		{
			get
			{
				return _mARRIAGE_STATUS_YN;
			}
			set
			{
				SqlString mARRIAGE_STATUS_YNTmp = (SqlString)value;
				if(mARRIAGE_STATUS_YNTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("MARRIAGE_STATUS_YN", "MARRIAGE_STATUS_YN can't be NULL");
				}
				_mARRIAGE_STATUS_YN = value;
			}
		}


		public SqlString JOB_NAME
		{
			get
			{
				return _jOB_NAME;
			}
			set
			{
				SqlString jOB_NAMETmp = (SqlString)value;
				if(jOB_NAMETmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("JOB_NAME", "JOB_NAME can't be NULL");
				}
				_jOB_NAME = value;
			}
		}


		public SqlString OFFICE_NAME
		{
			get
			{
				return _oFFICE_NAME;
			}
			set
			{
				SqlString oFFICE_NAMETmp = (SqlString)value;
				if(oFFICE_NAMETmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("OFFICE_NAME", "OFFICE_NAME can't be NULL");
				}
				_oFFICE_NAME = value;
			}
		}


		public SqlDecimal ID_OFFICE_CITY
		{
			get
			{
				return _iD_OFFICE_CITY;
			}
			set
			{
				SqlDecimal iD_OFFICE_CITYTmp = (SqlDecimal)value;
				if(iD_OFFICE_CITYTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_OFFICE_CITY", "ID_OFFICE_CITY can't be NULL");
				}
				_iD_OFFICE_CITY = value;
			}
		}


		public SqlString OFFICE_ADDRESS
		{
			get
			{
				return _oFFICE_ADDRESS;
			}
			set
			{
				SqlString oFFICE_ADDRESSTmp = (SqlString)value;
				if(oFFICE_ADDRESSTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("OFFICE_ADDRESS", "OFFICE_ADDRESS can't be NULL");
				}
				_oFFICE_ADDRESS = value;
			}
		}


		public SqlString HOME_PHONE
		{
			get
			{
				return _hOME_PHONE;
			}
			set
			{
				SqlString hOME_PHONETmp = (SqlString)value;
				if(hOME_PHONETmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("HOME_PHONE", "HOME_PHONE can't be NULL");
				}
				_hOME_PHONE = value;
			}
		}


		public SqlString MOBILE
		{
			get
			{
				return _mOBILE;
			}
			set
			{
				SqlString mOBILETmp = (SqlString)value;
				if(mOBILETmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("MOBILE", "MOBILE can't be NULL");
				}
				_mOBILE = value;
			}
		}


		public SqlString EMAIL
		{
			get
			{
				return _eMAIL;
			}
			set
			{
				SqlString eMAILTmp = (SqlString)value;
				if(eMAILTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("EMAIL", "EMAIL can't be NULL");
				}
				_eMAIL = value;
			}
		}


		public SqlString OFFICE_PHONE
		{
			get
			{
				return _oFFICE_PHONE;
			}
			set
			{
				SqlString oFFICE_PHONETmp = (SqlString)value;
				if(oFFICE_PHONETmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("OFFICE_PHONE", "OFFICE_PHONE can't be NULL");
				}
				_oFFICE_PHONE = value;
			}
		}


		public SqlDecimal ID_RESIDENT_CITY
		{
			get
			{
				return _iD_RESIDENT_CITY;
			}
			set
			{
				SqlDecimal iD_RESIDENT_CITYTmp = (SqlDecimal)value;
				if(iD_RESIDENT_CITYTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_RESIDENT_CITY", "ID_RESIDENT_CITY can't be NULL");
				}
				_iD_RESIDENT_CITY = value;
			}
		}


		public SqlString RESIDENT_ADDRESS
		{
			get
			{
				return _rESIDENT_ADDRESS;
			}
			set
			{
				SqlString rESIDENT_ADDRESSTmp = (SqlString)value;
				if(rESIDENT_ADDRESSTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("RESIDENT_ADDRESS", "RESIDENT_ADDRESS can't be NULL");
				}
				_rESIDENT_ADDRESS = value;
			}
		}


		public SqlDecimal ID_LIVING_CITY_NAME
		{
			get
			{
				return _iD_LIVING_CITY_NAME;
			}
			set
			{
				SqlDecimal iD_LIVING_CITY_NAMETmp = (SqlDecimal)value;
				if(iD_LIVING_CITY_NAMETmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_LIVING_CITY_NAME", "ID_LIVING_CITY_NAME can't be NULL");
				}
				_iD_LIVING_CITY_NAME = value;
			}
		}


		public SqlString LIVING_ADDRESS
		{
			get
			{
				return _lIVING_ADDRESS;
			}
			set
			{
				SqlString lIVING_ADDRESSTmp = (SqlString)value;
				if(lIVING_ADDRESSTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("LIVING_ADDRESS", "LIVING_ADDRESS can't be NULL");
				}
				_lIVING_ADDRESS = value;
			}
		}


		public SqlDecimal ID_CONTACT_SOURCE
		{
			get
			{
				return _iD_CONTACT_SOURCE;
			}
			set
			{
				SqlDecimal iD_CONTACT_SOURCETmp = (SqlDecimal)value;
				if(iD_CONTACT_SOURCETmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_CONTACT_SOURCE", "ID_CONTACT_SOURCE can't be NULL");
				}
				_iD_CONTACT_SOURCE = value;
			}
		}


		public SqlDecimal ID_PERSONAL_SOURCE
		{
			get
			{
				return _iD_PERSONAL_SOURCE;
			}
			set
			{
				SqlDecimal iD_PERSONAL_SOURCETmp = (SqlDecimal)value;
				if(iD_PERSONAL_SOURCETmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_PERSONAL_SOURCE", "ID_PERSONAL_SOURCE can't be NULL");
				}
				_iD_PERSONAL_SOURCE = value;
			}
		}


		public SqlDecimal ID_TRAINING_PROJECT
		{
			get
			{
				return _iD_TRAINING_PROJECT;
			}
			set
			{
				SqlDecimal iD_TRAINING_PROJECTTmp = (SqlDecimal)value;
				if(iD_TRAINING_PROJECTTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_TRAINING_PROJECT", "ID_TRAINING_PROJECT can't be NULL");
				}
				_iD_TRAINING_PROJECT = value;
			}
		}


		public SqlDecimal ID_CURENT_MANAGER
		{
			get
			{
				return _iD_CURENT_MANAGER;
			}
			set
			{
				SqlDecimal iD_CURENT_MANAGERTmp = (SqlDecimal)value;
				if(iD_CURENT_MANAGERTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_CURENT_MANAGER", "ID_CURENT_MANAGER can't be NULL");
				}
				_iD_CURENT_MANAGER = value;
			}
		}


		public SqlDecimal ID_CREATE_BY
		{
			get
			{
				return _iD_CREATE_BY;
			}
			set
			{
				SqlDecimal iD_CREATE_BYTmp = (SqlDecimal)value;
				if(iD_CREATE_BYTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_CREATE_BY", "ID_CREATE_BY can't be NULL");
				}
				_iD_CREATE_BY = value;
			}
		}


		public SqlDateTime CREATE_DATE
		{
			get
			{
				return _cREATE_DATE;
			}
			set
			{
				SqlDateTime cREATE_DATETmp = (SqlDateTime)value;
				if(cREATE_DATETmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("CREATE_DATE", "CREATE_DATE can't be NULL");
				}
				_cREATE_DATE = value;
			}
		}


		public SqlDecimal LEVEL_MODE
		{
			get
			{
				return _lEVEL_MODE;
			}
			set
			{
				SqlDecimal lEVEL_MODETmp = (SqlDecimal)value;
				if(lEVEL_MODETmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("LEVEL_MODE", "LEVEL_MODE can't be NULL");
				}
				_lEVEL_MODE = value;
			}
		}


		public SqlDecimal GROUP_ID
		{
			get
			{
				return _gROUP_ID;
			}
			set
			{
				SqlDecimal gROUP_IDTmp = (SqlDecimal)value;
				if(gROUP_IDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("GROUP_ID", "GROUP_ID can't be NULL");
				}
				_gROUP_ID = value;
			}
		}


		public SqlString NOTE1
		{
			get
			{
				return _nOTE1;
			}
			set
			{
				SqlString nOTE1Tmp = (SqlString)value;
				if(nOTE1Tmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("NOTE1", "NOTE1 can't be NULL");
				}
				_nOTE1 = value;
			}
		}


		public SqlString NOTE2
		{
			get
			{
				return _nOTE2;
			}
			set
			{
				SqlString nOTE2Tmp = (SqlString)value;
				if(nOTE2Tmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("NOTE2", "NOTE2 can't be NULL");
				}
				_nOTE2 = value;
			}
		}


		public SqlString NOTE3
		{
			get
			{
				return _nOTE3;
			}
			set
			{
				SqlString nOTE3Tmp = (SqlString)value;
				if(nOTE3Tmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("NOTE3", "NOTE3 can't be NULL");
				}
				_nOTE3 = value;
			}
		}


		public SqlString NOTE4
		{
			get
			{
				return _nOTE4;
			}
			set
			{
				SqlString nOTE4Tmp = (SqlString)value;
				if(nOTE4Tmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("NOTE4", "NOTE4 can't be NULL");
				}
				_nOTE4 = value;
			}
		}


		public SqlString NOTE5
		{
			get
			{
				return _nOTE5;
			}
			set
			{
				SqlString nOTE5Tmp = (SqlString)value;
				if(nOTE5Tmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("NOTE5", "NOTE5 can't be NULL");
				}
				_nOTE5 = value;
			}
		}


		public SqlString NOTE6
		{
			get
			{
				return _nOTE6;
			}
			set
			{
				SqlString nOTE6Tmp = (SqlString)value;
				if(nOTE6Tmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("NOTE6", "NOTE6 can't be NULL");
				}
				_nOTE6 = value;
			}
		}


		public SqlString NOTE7
		{
			get
			{
				return _nOTE7;
			}
			set
			{
				SqlString nOTE7Tmp = (SqlString)value;
				if(nOTE7Tmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("NOTE7", "NOTE7 can't be NULL");
				}
				_nOTE7 = value;
			}
		}


		public SqlString NOTE8
		{
			get
			{
				return _nOTE8;
			}
			set
			{
				SqlString nOTE8Tmp = (SqlString)value;
				if(nOTE8Tmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("NOTE8", "NOTE8 can't be NULL");
				}
				_nOTE8 = value;
			}
		}


		public SqlString NOTE9
		{
			get
			{
				return _nOTE9;
			}
			set
			{
				SqlString nOTE9Tmp = (SqlString)value;
				if(nOTE9Tmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("NOTE9", "NOTE9 can't be NULL");
				}
				_nOTE9 = value;
			}
		}


		public SqlString NOTE10
		{
			get
			{
				return _nOTE10;
			}
			set
			{
				SqlString nOTE10Tmp = (SqlString)value;
				if(nOTE10Tmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("NOTE10", "NOTE10 can't be NULL");
				}
				_nOTE10 = value;
			}
		}


		public SqlDateTime EVENT_DATE
		{
			get
			{
				return _eVENT_DATE;
			}
			set
			{
				SqlDateTime eVENT_DATETmp = (SqlDateTime)value;
				if(eVENT_DATETmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("EVENT_DATE", "EVENT_DATE can't be NULL");
				}
				_eVENT_DATE = value;
			}
		}


		public SqlString SENT_CONTENT
		{
			get
			{
				return _sENT_CONTENT;
			}
			set
			{
				SqlString sENT_CONTENTTmp = (SqlString)value;
				if(sENT_CONTENTTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("SENT_CONTENT", "SENT_CONTENT can't be NULL");
				}
				_sENT_CONTENT = value;
			}
		}


		public SqlString REPLY_CONTENT
		{
			get
			{
				return _rEPLY_CONTENT;
			}
			set
			{
				SqlString rEPLY_CONTENTTmp = (SqlString)value;
				if(rEPLY_CONTENTTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("REPLY_CONTENT", "REPLY_CONTENT can't be NULL");
				}
				_rEPLY_CONTENT = value;
			}
		}


		public SqlString NOTE
		{
			get
			{
				return _nOTE;
			}
			set
			{
				SqlString nOTETmp = (SqlString)value;
				if(nOTETmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("NOTE", "NOTE can't be NULL");
				}
				_nOTE = value;
			}
		}


		public SqlString MA_PHAN_NHOM
		{
			get
			{
				return _mA_PHAN_NHOM;
			}
			set
			{
				SqlString mA_PHAN_NHOMTmp = (SqlString)value;
				if(mA_PHAN_NHOMTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("MA_PHAN_NHOM", "MA_PHAN_NHOM can't be NULL");
				}
				_mA_PHAN_NHOM = value;
			}
		}


		public SqlString NGUOI_QUAN_LY
		{
			get
			{
				return _nGUOI_QUAN_LY;
			}
			set
			{
				SqlString nGUOI_QUAN_LYTmp = (SqlString)value;
				if(nGUOI_QUAN_LYTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("NGUOI_QUAN_LY", "NGUOI_QUAN_LY can't be NULL");
				}
				_nGUOI_QUAN_LY = value;
			}
		}
		#endregion
	}
}
