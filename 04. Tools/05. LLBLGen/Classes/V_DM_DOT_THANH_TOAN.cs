///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the view 'V_DM_DOT_THANH_TOAN'
// Generated by LLBLGen v1.21.2003.712 Final on: Wednesday, November 09, 2011, 10:55:12 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace TRMLLBL
{
	/// <summary>
	/// Purpose: Data Access class for the view 'V_DM_DOT_THANH_TOAN'.
	/// </summary>
	public class V_DM_DOT_THANH_TOAN : DBInteractionBase
	{
		#region Class Member Declarations
			private SqlDateTime		_nGAY_TT_DU_KIEN;
			private SqlDecimal		_iD_DON_VI_THANH_TOAN, _iD_TRANG_THAI_DOT_TT, _iD;
			private SqlString		_gHI_CHU, _dON_VI_THANH_TOAN, _tEN_DOT_TT, _mA_DOT_TT, _tRANG_THAI_DOT_TT;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public V_DM_DOT_THANH_TOAN()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>MA_DOT_TT</LI>
		///		 <LI>TEN_DOT_TT</LI>
		///		 <LI>NGAY_TT_DU_KIEN</LI>
		///		 <LI>ID_TRANG_THAI_DOT_TT</LI>
		///		 <LI>TRANG_THAI_DOT_TT. May be SqlString.Null</LI>
		///		 <LI>ID_DON_VI_THANH_TOAN</LI>
		///		 <LI>DON_VI_THANH_TOAN. May be SqlString.Null</LI>
		///		 <LI>GHI_CHU. May be SqlString.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ID</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_V_DM_DOT_THANH_TOAN_Insert]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@MA_DOT_TT", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _mA_DOT_TT));
				cmdToExecute.Parameters.Add(new SqlParameter("@TEN_DOT_TT", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _tEN_DOT_TT));
				cmdToExecute.Parameters.Add(new SqlParameter("@NGAY_TT_DU_KIEN", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _nGAY_TT_DU_KIEN));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_TRANG_THAI_DOT_TT", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_TRANG_THAI_DOT_TT));
				cmdToExecute.Parameters.Add(new SqlParameter("@TRANG_THAI_DOT_TT", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _tRANG_THAI_DOT_TT));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_DON_VI_THANH_TOAN", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_DON_VI_THANH_TOAN));
				cmdToExecute.Parameters.Add(new SqlParameter("@DON_VI_THANH_TOAN", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _dON_VI_THANH_TOAN));
				cmdToExecute.Parameters.Add(new SqlParameter("@GHI_CHU", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _gHI_CHU));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID", SqlDbType.Decimal, 9, ParameterDirection.Output, false, 18, 1, "", DataRowVersion.Proposed, _iD));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_iD = (Decimal)cmdToExecute.Parameters["@ID"].Value;
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("V_DM_DOT_THANH_TOAN::Insert::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method for a unique field. This method will Select one row from the database, based on the unique field 'ID'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID</LI>
		/// </UL>
		///		 <LI>ID</LI>
		///		 <LI>MA_DOT_TT</LI>
		///		 <LI>TEN_DOT_TT</LI>
		///		 <LI>NGAY_TT_DU_KIEN</LI>
		///		 <LI>ID_TRANG_THAI_DOT_TT</LI>
		///		 <LI>TRANG_THAI_DOT_TT</LI>
		///		 <LI>ID_DON_VI_THANH_TOAN</LI>
		///		 <LI>DON_VI_THANH_TOAN</LI>
		///		 <LI>GHI_CHU</LI>
		/// Will fill all properties corresponding with a field in the view with the value of the row selected.
		/// </remarks>
		public DataTable SelectOneWIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_V_DM_DOT_THANH_TOAN_SelectOneWIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("V_DM_DOT_THANH_TOAN");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				if(toReturn.Rows.Count > 0)
				{
					_iD = (Decimal)toReturn.Rows[0]["ID"];
					_mA_DOT_TT = (string)toReturn.Rows[0]["MA_DOT_TT"];
					_tEN_DOT_TT = (string)toReturn.Rows[0]["TEN_DOT_TT"];
					_nGAY_TT_DU_KIEN = (DateTime)toReturn.Rows[0]["NGAY_TT_DU_KIEN"];
					_iD_TRANG_THAI_DOT_TT = (Decimal)toReturn.Rows[0]["ID_TRANG_THAI_DOT_TT"];
					_tRANG_THAI_DOT_TT = toReturn.Rows[0]["TRANG_THAI_DOT_TT"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["TRANG_THAI_DOT_TT"];
					_iD_DON_VI_THANH_TOAN = (Decimal)toReturn.Rows[0]["ID_DON_VI_THANH_TOAN"];
					_dON_VI_THANH_TOAN = toReturn.Rows[0]["DON_VI_THANH_TOAN"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["DON_VI_THANH_TOAN"];
					_gHI_CHU = toReturn.Rows[0]["GHI_CHU"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["GHI_CHU"];
				}
				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("V_DM_DOT_THANH_TOAN::SelectOneWIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		#region Class Property Declarations
		public SqlDecimal ID
		{
			get
			{
				return _iD;
			}
			set
			{
				SqlDecimal iDTmp = (SqlDecimal)value;
				if(iDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID", "ID can't be NULL");
				}
				_iD = value;
			}
		}


		public SqlString MA_DOT_TT
		{
			get
			{
				return _mA_DOT_TT;
			}
			set
			{
				SqlString mA_DOT_TTTmp = (SqlString)value;
				if(mA_DOT_TTTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("MA_DOT_TT", "MA_DOT_TT can't be NULL");
				}
				_mA_DOT_TT = value;
			}
		}


		public SqlString TEN_DOT_TT
		{
			get
			{
				return _tEN_DOT_TT;
			}
			set
			{
				SqlString tEN_DOT_TTTmp = (SqlString)value;
				if(tEN_DOT_TTTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("TEN_DOT_TT", "TEN_DOT_TT can't be NULL");
				}
				_tEN_DOT_TT = value;
			}
		}


		public SqlDateTime NGAY_TT_DU_KIEN
		{
			get
			{
				return _nGAY_TT_DU_KIEN;
			}
			set
			{
				SqlDateTime nGAY_TT_DU_KIENTmp = (SqlDateTime)value;
				if(nGAY_TT_DU_KIENTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("NGAY_TT_DU_KIEN", "NGAY_TT_DU_KIEN can't be NULL");
				}
				_nGAY_TT_DU_KIEN = value;
			}
		}


		public SqlDecimal ID_TRANG_THAI_DOT_TT
		{
			get
			{
				return _iD_TRANG_THAI_DOT_TT;
			}
			set
			{
				SqlDecimal iD_TRANG_THAI_DOT_TTTmp = (SqlDecimal)value;
				if(iD_TRANG_THAI_DOT_TTTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_TRANG_THAI_DOT_TT", "ID_TRANG_THAI_DOT_TT can't be NULL");
				}
				_iD_TRANG_THAI_DOT_TT = value;
			}
		}


		public SqlString TRANG_THAI_DOT_TT
		{
			get
			{
				return _tRANG_THAI_DOT_TT;
			}
			set
			{
				SqlString tRANG_THAI_DOT_TTTmp = (SqlString)value;
				if(tRANG_THAI_DOT_TTTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("TRANG_THAI_DOT_TT", "TRANG_THAI_DOT_TT can't be NULL");
				}
				_tRANG_THAI_DOT_TT = value;
			}
		}


		public SqlDecimal ID_DON_VI_THANH_TOAN
		{
			get
			{
				return _iD_DON_VI_THANH_TOAN;
			}
			set
			{
				SqlDecimal iD_DON_VI_THANH_TOANTmp = (SqlDecimal)value;
				if(iD_DON_VI_THANH_TOANTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_DON_VI_THANH_TOAN", "ID_DON_VI_THANH_TOAN can't be NULL");
				}
				_iD_DON_VI_THANH_TOAN = value;
			}
		}


		public SqlString DON_VI_THANH_TOAN
		{
			get
			{
				return _dON_VI_THANH_TOAN;
			}
			set
			{
				SqlString dON_VI_THANH_TOANTmp = (SqlString)value;
				if(dON_VI_THANH_TOANTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("DON_VI_THANH_TOAN", "DON_VI_THANH_TOAN can't be NULL");
				}
				_dON_VI_THANH_TOAN = value;
			}
		}


		public SqlString GHI_CHU
		{
			get
			{
				return _gHI_CHU;
			}
			set
			{
				SqlString gHI_CHUTmp = (SqlString)value;
				if(gHI_CHUTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("GHI_CHU", "GHI_CHU can't be NULL");
				}
				_gHI_CHU = value;
			}
		}
		#endregion
	}
}
