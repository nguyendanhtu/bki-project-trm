///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'DM_HOP_DONG_KHUNG'
// Generated by LLBLGen v1.21.2003.712 Final on: Wednesday, September 28, 2011, 6:24:20 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace TRMLLBL
{
	/// <summary>
	/// Purpose: Data Access class for the table 'DM_HOP_DONG_KHUNG'.
	/// </summary>
	public class DM_HOP_DONG_KHUNG : DBInteractionBase
	{
		#region Class Member Declarations
			private SqlDateTime		_nGAY_KY, _nGAY_HIEU_LUC, _nGAY_KET_THUC_DU_KIEN;
			private SqlDecimal		_iD_MON1, _iD_MON2, _iD_DON_VI_THANH_TOAN, _iD_DON_VI_THANH_TOANOld, _tHUE_SUAT, _iD_MON4, _iD_MON5, _iD_MON3, _iD_MON6, _gIA_TRI_HOP_DONG, _iD_GIANG_VIEN, _iD_GIANG_VIENOld, _iD, _iD_LOAI_HOP_DONG, _iD_LOAI_HOP_DONGOld, _iD_TRANG_THAI_HOP_DONG, _iD_TRANG_THAI_HOP_DONGOld, _iD_DON_VI_QUAN_LY, _iD_DON_VI_QUAN_LYOld;
			private SqlString		_gHI_CHU2, _gHI_CHU3, _cO_SO_HD_YN, _gHI_CHU4, _mA_PO_PHU_TRACH, _sO_HOP_DONG, _gHI_CHU, _vAN_HANH_YN, _hOC_LIEU_YN;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public DM_HOP_DONG_KHUNG()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>SO_HOP_DONG</LI>
		///		 <LI>ID_GIANG_VIEN</LI>
		///		 <LI>NGAY_KY</LI>
		///		 <LI>NGAY_HIEU_LUC. May be SqlDateTime.Null</LI>
		///		 <LI>NGAY_KET_THUC_DU_KIEN. May be SqlDateTime.Null</LI>
		///		 <LI>GIA_TRI_HOP_DONG. May be SqlDecimal.Null</LI>
		///		 <LI>ID_LOAI_HOP_DONG</LI>
		///		 <LI>ID_DON_VI_QUAN_LY</LI>
		///		 <LI>GHI_CHU. May be SqlString.Null</LI>
		///		 <LI>ID_TRANG_THAI_HOP_DONG</LI>
		///		 <LI>ID_DON_VI_THANH_TOAN</LI>
		///		 <LI>THUE_SUAT. May be SqlDecimal.Null</LI>
		///		 <LI>ID_MON1</LI>
		///		 <LI>ID_MON2. May be SqlDecimal.Null</LI>
		///		 <LI>ID_MON3. May be SqlDecimal.Null</LI>
		///		 <LI>ID_MON4. May be SqlDecimal.Null</LI>
		///		 <LI>ID_MON5. May be SqlDecimal.Null</LI>
		///		 <LI>ID_MON6. May be SqlDecimal.Null</LI>
		///		 <LI>HOC_LIEU_YN</LI>
		///		 <LI>VAN_HANH_YN</LI>
		///		 <LI>MA_PO_PHU_TRACH. May be SqlString.Null</LI>
		///		 <LI>GHI_CHU2. May be SqlString.Null</LI>
		///		 <LI>GHI_CHU3. May be SqlString.Null</LI>
		///		 <LI>GHI_CHU4. May be SqlString.Null</LI>
		///		 <LI>CO_SO_HD_YN</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ID</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_DM_HOP_DONG_KHUNG_Insert]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@SO_HOP_DONG", SqlDbType.NVarChar, 35, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _sO_HOP_DONG));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_GIANG_VIEN", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_GIANG_VIEN));
				cmdToExecute.Parameters.Add(new SqlParameter("@NGAY_KY", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _nGAY_KY));
				cmdToExecute.Parameters.Add(new SqlParameter("@NGAY_HIEU_LUC", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _nGAY_HIEU_LUC));
				cmdToExecute.Parameters.Add(new SqlParameter("@NGAY_KET_THUC_DU_KIEN", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _nGAY_KET_THUC_DU_KIEN));
				cmdToExecute.Parameters.Add(new SqlParameter("@GIA_TRI_HOP_DONG", SqlDbType.Decimal, 13, ParameterDirection.Input, false, 21, 3, "", DataRowVersion.Proposed, _gIA_TRI_HOP_DONG));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_LOAI_HOP_DONG", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_LOAI_HOP_DONG));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_DON_VI_QUAN_LY", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_DON_VI_QUAN_LY));
				cmdToExecute.Parameters.Add(new SqlParameter("@GHI_CHU", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _gHI_CHU));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_TRANG_THAI_HOP_DONG", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_TRANG_THAI_HOP_DONG));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_DON_VI_THANH_TOAN", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_DON_VI_THANH_TOAN));
				cmdToExecute.Parameters.Add(new SqlParameter("@THUE_SUAT", SqlDbType.Decimal, 13, ParameterDirection.Input, false, 21, 3, "", DataRowVersion.Proposed, _tHUE_SUAT));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_MON1", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_MON1));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_MON2", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_MON2));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_MON3", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_MON3));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_MON4", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_MON4));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_MON5", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_MON5));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_MON6", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_MON6));
				cmdToExecute.Parameters.Add(new SqlParameter("@HOC_LIEU_YN", SqlDbType.NVarChar, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _hOC_LIEU_YN));
				cmdToExecute.Parameters.Add(new SqlParameter("@VAN_HANH_YN", SqlDbType.NVarChar, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _vAN_HANH_YN));
				cmdToExecute.Parameters.Add(new SqlParameter("@MA_PO_PHU_TRACH", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _mA_PO_PHU_TRACH));
				cmdToExecute.Parameters.Add(new SqlParameter("@GHI_CHU2", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _gHI_CHU2));
				cmdToExecute.Parameters.Add(new SqlParameter("@GHI_CHU3", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _gHI_CHU3));
				cmdToExecute.Parameters.Add(new SqlParameter("@GHI_CHU4", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _gHI_CHU4));
				cmdToExecute.Parameters.Add(new SqlParameter("@CO_SO_HD_YN", SqlDbType.NVarChar, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _cO_SO_HD_YN));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID", SqlDbType.Decimal, 9, ParameterDirection.Output, false, 18, 1, "", DataRowVersion.Proposed, _iD));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_iD = (Decimal)cmdToExecute.Parameters["@ID"].Value;
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("DM_HOP_DONG_KHUNG::Insert::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID</LI>
		///		 <LI>SO_HOP_DONG</LI>
		///		 <LI>ID_GIANG_VIEN</LI>
		///		 <LI>NGAY_KY</LI>
		///		 <LI>NGAY_HIEU_LUC. May be SqlDateTime.Null</LI>
		///		 <LI>NGAY_KET_THUC_DU_KIEN. May be SqlDateTime.Null</LI>
		///		 <LI>GIA_TRI_HOP_DONG. May be SqlDecimal.Null</LI>
		///		 <LI>ID_LOAI_HOP_DONG</LI>
		///		 <LI>ID_DON_VI_QUAN_LY</LI>
		///		 <LI>GHI_CHU. May be SqlString.Null</LI>
		///		 <LI>ID_TRANG_THAI_HOP_DONG</LI>
		///		 <LI>ID_DON_VI_THANH_TOAN</LI>
		///		 <LI>THUE_SUAT. May be SqlDecimal.Null</LI>
		///		 <LI>ID_MON1</LI>
		///		 <LI>ID_MON2. May be SqlDecimal.Null</LI>
		///		 <LI>ID_MON3. May be SqlDecimal.Null</LI>
		///		 <LI>ID_MON4. May be SqlDecimal.Null</LI>
		///		 <LI>ID_MON5. May be SqlDecimal.Null</LI>
		///		 <LI>ID_MON6. May be SqlDecimal.Null</LI>
		///		 <LI>HOC_LIEU_YN</LI>
		///		 <LI>VAN_HANH_YN</LI>
		///		 <LI>MA_PO_PHU_TRACH. May be SqlString.Null</LI>
		///		 <LI>GHI_CHU2. May be SqlString.Null</LI>
		///		 <LI>GHI_CHU3. May be SqlString.Null</LI>
		///		 <LI>GHI_CHU4. May be SqlString.Null</LI>
		///		 <LI>CO_SO_HD_YN</LI>
		/// </UL>
		/// </remarks>
		public override bool Update()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_DM_HOP_DONG_KHUNG_Update]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD));
				cmdToExecute.Parameters.Add(new SqlParameter("@SO_HOP_DONG", SqlDbType.NVarChar, 35, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _sO_HOP_DONG));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_GIANG_VIEN", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_GIANG_VIEN));
				cmdToExecute.Parameters.Add(new SqlParameter("@NGAY_KY", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _nGAY_KY));
				cmdToExecute.Parameters.Add(new SqlParameter("@NGAY_HIEU_LUC", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _nGAY_HIEU_LUC));
				cmdToExecute.Parameters.Add(new SqlParameter("@NGAY_KET_THUC_DU_KIEN", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _nGAY_KET_THUC_DU_KIEN));
				cmdToExecute.Parameters.Add(new SqlParameter("@GIA_TRI_HOP_DONG", SqlDbType.Decimal, 13, ParameterDirection.Input, false, 21, 3, "", DataRowVersion.Proposed, _gIA_TRI_HOP_DONG));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_LOAI_HOP_DONG", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_LOAI_HOP_DONG));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_DON_VI_QUAN_LY", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_DON_VI_QUAN_LY));
				cmdToExecute.Parameters.Add(new SqlParameter("@GHI_CHU", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _gHI_CHU));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_TRANG_THAI_HOP_DONG", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_TRANG_THAI_HOP_DONG));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_DON_VI_THANH_TOAN", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_DON_VI_THANH_TOAN));
				cmdToExecute.Parameters.Add(new SqlParameter("@THUE_SUAT", SqlDbType.Decimal, 13, ParameterDirection.Input, false, 21, 3, "", DataRowVersion.Proposed, _tHUE_SUAT));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_MON1", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_MON1));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_MON2", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_MON2));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_MON3", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_MON3));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_MON4", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_MON4));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_MON5", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_MON5));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_MON6", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_MON6));
				cmdToExecute.Parameters.Add(new SqlParameter("@HOC_LIEU_YN", SqlDbType.NVarChar, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _hOC_LIEU_YN));
				cmdToExecute.Parameters.Add(new SqlParameter("@VAN_HANH_YN", SqlDbType.NVarChar, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _vAN_HANH_YN));
				cmdToExecute.Parameters.Add(new SqlParameter("@MA_PO_PHU_TRACH", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _mA_PO_PHU_TRACH));
				cmdToExecute.Parameters.Add(new SqlParameter("@GHI_CHU2", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _gHI_CHU2));
				cmdToExecute.Parameters.Add(new SqlParameter("@GHI_CHU3", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _gHI_CHU3));
				cmdToExecute.Parameters.Add(new SqlParameter("@GHI_CHU4", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _gHI_CHU4));
				cmdToExecute.Parameters.Add(new SqlParameter("@CO_SO_HD_YN", SqlDbType.NVarChar, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _cO_SO_HD_YN));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("DM_HOP_DONG_KHUNG::Update::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'ID_GIANG_VIEN.
		/// This method will Update one or more existing rows in the database. It will reset the field 'ID_GIANG_VIEN' in
		/// all rows which have as value for this field the value as set in property 'ID_GIANG_VIENOld' to 
		/// the value as set in property 'ID_GIANG_VIEN'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID_GIANG_VIEN</LI>
		///		 <LI>ID_GIANG_VIENOld</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWID_GIANG_VIENLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_DM_HOP_DONG_KHUNG_UpdateAllWID_GIANG_VIENLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_GIANG_VIEN", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_GIANG_VIEN));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_GIANG_VIENOld", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_GIANG_VIENOld));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("DM_HOP_DONG_KHUNG::UpdateAllWID_GIANG_VIENLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'ID_LOAI_HOP_DONG.
		/// This method will Update one or more existing rows in the database. It will reset the field 'ID_LOAI_HOP_DONG' in
		/// all rows which have as value for this field the value as set in property 'ID_LOAI_HOP_DONGOld' to 
		/// the value as set in property 'ID_LOAI_HOP_DONG'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID_LOAI_HOP_DONG</LI>
		///		 <LI>ID_LOAI_HOP_DONGOld</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWID_LOAI_HOP_DONGLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_DM_HOP_DONG_KHUNG_UpdateAllWID_LOAI_HOP_DONGLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_LOAI_HOP_DONG", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_LOAI_HOP_DONG));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_LOAI_HOP_DONGOld", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_LOAI_HOP_DONGOld));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("DM_HOP_DONG_KHUNG::UpdateAllWID_LOAI_HOP_DONGLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'ID_DON_VI_QUAN_LY.
		/// This method will Update one or more existing rows in the database. It will reset the field 'ID_DON_VI_QUAN_LY' in
		/// all rows which have as value for this field the value as set in property 'ID_DON_VI_QUAN_LYOld' to 
		/// the value as set in property 'ID_DON_VI_QUAN_LY'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID_DON_VI_QUAN_LY</LI>
		///		 <LI>ID_DON_VI_QUAN_LYOld</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWID_DON_VI_QUAN_LYLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_DM_HOP_DONG_KHUNG_UpdateAllWID_DON_VI_QUAN_LYLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_DON_VI_QUAN_LY", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_DON_VI_QUAN_LY));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_DON_VI_QUAN_LYOld", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_DON_VI_QUAN_LYOld));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("DM_HOP_DONG_KHUNG::UpdateAllWID_DON_VI_QUAN_LYLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'ID_TRANG_THAI_HOP_DONG.
		/// This method will Update one or more existing rows in the database. It will reset the field 'ID_TRANG_THAI_HOP_DONG' in
		/// all rows which have as value for this field the value as set in property 'ID_TRANG_THAI_HOP_DONGOld' to 
		/// the value as set in property 'ID_TRANG_THAI_HOP_DONG'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID_TRANG_THAI_HOP_DONG</LI>
		///		 <LI>ID_TRANG_THAI_HOP_DONGOld</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWID_TRANG_THAI_HOP_DONGLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_DM_HOP_DONG_KHUNG_UpdateAllWID_TRANG_THAI_HOP_DONGLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_TRANG_THAI_HOP_DONG", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_TRANG_THAI_HOP_DONG));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_TRANG_THAI_HOP_DONGOld", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_TRANG_THAI_HOP_DONGOld));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("DM_HOP_DONG_KHUNG::UpdateAllWID_TRANG_THAI_HOP_DONGLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'ID_DON_VI_THANH_TOAN.
		/// This method will Update one or more existing rows in the database. It will reset the field 'ID_DON_VI_THANH_TOAN' in
		/// all rows which have as value for this field the value as set in property 'ID_DON_VI_THANH_TOANOld' to 
		/// the value as set in property 'ID_DON_VI_THANH_TOAN'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID_DON_VI_THANH_TOAN</LI>
		///		 <LI>ID_DON_VI_THANH_TOANOld</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWID_DON_VI_THANH_TOANLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_DM_HOP_DONG_KHUNG_UpdateAllWID_DON_VI_THANH_TOANLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_DON_VI_THANH_TOAN", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_DON_VI_THANH_TOAN));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_DON_VI_THANH_TOANOld", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_DON_VI_THANH_TOANOld));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("DM_HOP_DONG_KHUNG::UpdateAllWID_DON_VI_THANH_TOANLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_DM_HOP_DONG_KHUNG_Delete]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("DM_HOP_DONG_KHUNG::Delete::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'ID_GIANG_VIEN'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID_GIANG_VIEN</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWID_GIANG_VIENLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_DM_HOP_DONG_KHUNG_DeleteAllWID_GIANG_VIENLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_GIANG_VIEN", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_GIANG_VIEN));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("DM_HOP_DONG_KHUNG::DeleteAllWID_GIANG_VIENLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'ID_LOAI_HOP_DONG'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID_LOAI_HOP_DONG</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWID_LOAI_HOP_DONGLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_DM_HOP_DONG_KHUNG_DeleteAllWID_LOAI_HOP_DONGLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_LOAI_HOP_DONG", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_LOAI_HOP_DONG));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("DM_HOP_DONG_KHUNG::DeleteAllWID_LOAI_HOP_DONGLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'ID_DON_VI_QUAN_LY'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID_DON_VI_QUAN_LY</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWID_DON_VI_QUAN_LYLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_DM_HOP_DONG_KHUNG_DeleteAllWID_DON_VI_QUAN_LYLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_DON_VI_QUAN_LY", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_DON_VI_QUAN_LY));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("DM_HOP_DONG_KHUNG::DeleteAllWID_DON_VI_QUAN_LYLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'ID_TRANG_THAI_HOP_DONG'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID_TRANG_THAI_HOP_DONG</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWID_TRANG_THAI_HOP_DONGLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_DM_HOP_DONG_KHUNG_DeleteAllWID_TRANG_THAI_HOP_DONGLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_TRANG_THAI_HOP_DONG", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_TRANG_THAI_HOP_DONG));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("DM_HOP_DONG_KHUNG::DeleteAllWID_TRANG_THAI_HOP_DONGLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'ID_DON_VI_THANH_TOAN'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID_DON_VI_THANH_TOAN</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWID_DON_VI_THANH_TOANLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_DM_HOP_DONG_KHUNG_DeleteAllWID_DON_VI_THANH_TOANLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_DON_VI_THANH_TOAN", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_DON_VI_THANH_TOAN));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("DM_HOP_DONG_KHUNG::DeleteAllWID_DON_VI_THANH_TOANLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		#region Class Property Declarations
		public SqlDecimal ID
		{
			get
			{
				return _iD;
			}
			set
			{
				SqlDecimal iDTmp = (SqlDecimal)value;
				if(iDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID", "ID can't be NULL");
				}
				_iD = value;
			}
		}


		public SqlString SO_HOP_DONG
		{
			get
			{
				return _sO_HOP_DONG;
			}
			set
			{
				SqlString sO_HOP_DONGTmp = (SqlString)value;
				if(sO_HOP_DONGTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("SO_HOP_DONG", "SO_HOP_DONG can't be NULL");
				}
				_sO_HOP_DONG = value;
			}
		}


		public SqlDecimal ID_GIANG_VIEN
		{
			get
			{
				return _iD_GIANG_VIEN;
			}
			set
			{
				SqlDecimal iD_GIANG_VIENTmp = (SqlDecimal)value;
				if(iD_GIANG_VIENTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_GIANG_VIEN", "ID_GIANG_VIEN can't be NULL");
				}
				_iD_GIANG_VIEN = value;
			}
		}
		public SqlDecimal ID_GIANG_VIENOld
		{
			get
			{
				return _iD_GIANG_VIENOld;
			}
			set
			{
				SqlDecimal iD_GIANG_VIENOldTmp = (SqlDecimal)value;
				if(iD_GIANG_VIENOldTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_GIANG_VIENOld", "ID_GIANG_VIENOld can't be NULL");
				}
				_iD_GIANG_VIENOld = value;
			}
		}


		public SqlDateTime NGAY_KY
		{
			get
			{
				return _nGAY_KY;
			}
			set
			{
				SqlDateTime nGAY_KYTmp = (SqlDateTime)value;
				if(nGAY_KYTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("NGAY_KY", "NGAY_KY can't be NULL");
				}
				_nGAY_KY = value;
			}
		}


		public SqlDateTime NGAY_HIEU_LUC
		{
			get
			{
				return _nGAY_HIEU_LUC;
			}
			set
			{
				SqlDateTime nGAY_HIEU_LUCTmp = (SqlDateTime)value;
				if(nGAY_HIEU_LUCTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("NGAY_HIEU_LUC", "NGAY_HIEU_LUC can't be NULL");
				}
				_nGAY_HIEU_LUC = value;
			}
		}


		public SqlDateTime NGAY_KET_THUC_DU_KIEN
		{
			get
			{
				return _nGAY_KET_THUC_DU_KIEN;
			}
			set
			{
				SqlDateTime nGAY_KET_THUC_DU_KIENTmp = (SqlDateTime)value;
				if(nGAY_KET_THUC_DU_KIENTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("NGAY_KET_THUC_DU_KIEN", "NGAY_KET_THUC_DU_KIEN can't be NULL");
				}
				_nGAY_KET_THUC_DU_KIEN = value;
			}
		}


		public SqlDecimal GIA_TRI_HOP_DONG
		{
			get
			{
				return _gIA_TRI_HOP_DONG;
			}
			set
			{
				SqlDecimal gIA_TRI_HOP_DONGTmp = (SqlDecimal)value;
				if(gIA_TRI_HOP_DONGTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("GIA_TRI_HOP_DONG", "GIA_TRI_HOP_DONG can't be NULL");
				}
				_gIA_TRI_HOP_DONG = value;
			}
		}


		public SqlDecimal ID_LOAI_HOP_DONG
		{
			get
			{
				return _iD_LOAI_HOP_DONG;
			}
			set
			{
				SqlDecimal iD_LOAI_HOP_DONGTmp = (SqlDecimal)value;
				if(iD_LOAI_HOP_DONGTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_LOAI_HOP_DONG", "ID_LOAI_HOP_DONG can't be NULL");
				}
				_iD_LOAI_HOP_DONG = value;
			}
		}
		public SqlDecimal ID_LOAI_HOP_DONGOld
		{
			get
			{
				return _iD_LOAI_HOP_DONGOld;
			}
			set
			{
				SqlDecimal iD_LOAI_HOP_DONGOldTmp = (SqlDecimal)value;
				if(iD_LOAI_HOP_DONGOldTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_LOAI_HOP_DONGOld", "ID_LOAI_HOP_DONGOld can't be NULL");
				}
				_iD_LOAI_HOP_DONGOld = value;
			}
		}


		public SqlDecimal ID_DON_VI_QUAN_LY
		{
			get
			{
				return _iD_DON_VI_QUAN_LY;
			}
			set
			{
				SqlDecimal iD_DON_VI_QUAN_LYTmp = (SqlDecimal)value;
				if(iD_DON_VI_QUAN_LYTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_DON_VI_QUAN_LY", "ID_DON_VI_QUAN_LY can't be NULL");
				}
				_iD_DON_VI_QUAN_LY = value;
			}
		}
		public SqlDecimal ID_DON_VI_QUAN_LYOld
		{
			get
			{
				return _iD_DON_VI_QUAN_LYOld;
			}
			set
			{
				SqlDecimal iD_DON_VI_QUAN_LYOldTmp = (SqlDecimal)value;
				if(iD_DON_VI_QUAN_LYOldTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_DON_VI_QUAN_LYOld", "ID_DON_VI_QUAN_LYOld can't be NULL");
				}
				_iD_DON_VI_QUAN_LYOld = value;
			}
		}


		public SqlString GHI_CHU
		{
			get
			{
				return _gHI_CHU;
			}
			set
			{
				SqlString gHI_CHUTmp = (SqlString)value;
				if(gHI_CHUTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("GHI_CHU", "GHI_CHU can't be NULL");
				}
				_gHI_CHU = value;
			}
		}


		public SqlDecimal ID_TRANG_THAI_HOP_DONG
		{
			get
			{
				return _iD_TRANG_THAI_HOP_DONG;
			}
			set
			{
				SqlDecimal iD_TRANG_THAI_HOP_DONGTmp = (SqlDecimal)value;
				if(iD_TRANG_THAI_HOP_DONGTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_TRANG_THAI_HOP_DONG", "ID_TRANG_THAI_HOP_DONG can't be NULL");
				}
				_iD_TRANG_THAI_HOP_DONG = value;
			}
		}
		public SqlDecimal ID_TRANG_THAI_HOP_DONGOld
		{
			get
			{
				return _iD_TRANG_THAI_HOP_DONGOld;
			}
			set
			{
				SqlDecimal iD_TRANG_THAI_HOP_DONGOldTmp = (SqlDecimal)value;
				if(iD_TRANG_THAI_HOP_DONGOldTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_TRANG_THAI_HOP_DONGOld", "ID_TRANG_THAI_HOP_DONGOld can't be NULL");
				}
				_iD_TRANG_THAI_HOP_DONGOld = value;
			}
		}


		public SqlDecimal ID_DON_VI_THANH_TOAN
		{
			get
			{
				return _iD_DON_VI_THANH_TOAN;
			}
			set
			{
				SqlDecimal iD_DON_VI_THANH_TOANTmp = (SqlDecimal)value;
				if(iD_DON_VI_THANH_TOANTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_DON_VI_THANH_TOAN", "ID_DON_VI_THANH_TOAN can't be NULL");
				}
				_iD_DON_VI_THANH_TOAN = value;
			}
		}
		public SqlDecimal ID_DON_VI_THANH_TOANOld
		{
			get
			{
				return _iD_DON_VI_THANH_TOANOld;
			}
			set
			{
				SqlDecimal iD_DON_VI_THANH_TOANOldTmp = (SqlDecimal)value;
				if(iD_DON_VI_THANH_TOANOldTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_DON_VI_THANH_TOANOld", "ID_DON_VI_THANH_TOANOld can't be NULL");
				}
				_iD_DON_VI_THANH_TOANOld = value;
			}
		}


		public SqlDecimal THUE_SUAT
		{
			get
			{
				return _tHUE_SUAT;
			}
			set
			{
				SqlDecimal tHUE_SUATTmp = (SqlDecimal)value;
				if(tHUE_SUATTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("THUE_SUAT", "THUE_SUAT can't be NULL");
				}
				_tHUE_SUAT = value;
			}
		}


		public SqlDecimal ID_MON1
		{
			get
			{
				return _iD_MON1;
			}
			set
			{
				SqlDecimal iD_MON1Tmp = (SqlDecimal)value;
				if(iD_MON1Tmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_MON1", "ID_MON1 can't be NULL");
				}
				_iD_MON1 = value;
			}
		}


		public SqlDecimal ID_MON2
		{
			get
			{
				return _iD_MON2;
			}
			set
			{
				SqlDecimal iD_MON2Tmp = (SqlDecimal)value;
				if(iD_MON2Tmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_MON2", "ID_MON2 can't be NULL");
				}
				_iD_MON2 = value;
			}
		}


		public SqlDecimal ID_MON3
		{
			get
			{
				return _iD_MON3;
			}
			set
			{
				SqlDecimal iD_MON3Tmp = (SqlDecimal)value;
				if(iD_MON3Tmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_MON3", "ID_MON3 can't be NULL");
				}
				_iD_MON3 = value;
			}
		}


		public SqlDecimal ID_MON4
		{
			get
			{
				return _iD_MON4;
			}
			set
			{
				SqlDecimal iD_MON4Tmp = (SqlDecimal)value;
				if(iD_MON4Tmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_MON4", "ID_MON4 can't be NULL");
				}
				_iD_MON4 = value;
			}
		}


		public SqlDecimal ID_MON5
		{
			get
			{
				return _iD_MON5;
			}
			set
			{
				SqlDecimal iD_MON5Tmp = (SqlDecimal)value;
				if(iD_MON5Tmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_MON5", "ID_MON5 can't be NULL");
				}
				_iD_MON5 = value;
			}
		}


		public SqlDecimal ID_MON6
		{
			get
			{
				return _iD_MON6;
			}
			set
			{
				SqlDecimal iD_MON6Tmp = (SqlDecimal)value;
				if(iD_MON6Tmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_MON6", "ID_MON6 can't be NULL");
				}
				_iD_MON6 = value;
			}
		}


		public SqlString HOC_LIEU_YN
		{
			get
			{
				return _hOC_LIEU_YN;
			}
			set
			{
				SqlString hOC_LIEU_YNTmp = (SqlString)value;
				if(hOC_LIEU_YNTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("HOC_LIEU_YN", "HOC_LIEU_YN can't be NULL");
				}
				_hOC_LIEU_YN = value;
			}
		}


		public SqlString VAN_HANH_YN
		{
			get
			{
				return _vAN_HANH_YN;
			}
			set
			{
				SqlString vAN_HANH_YNTmp = (SqlString)value;
				if(vAN_HANH_YNTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("VAN_HANH_YN", "VAN_HANH_YN can't be NULL");
				}
				_vAN_HANH_YN = value;
			}
		}


		public SqlString MA_PO_PHU_TRACH
		{
			get
			{
				return _mA_PO_PHU_TRACH;
			}
			set
			{
				SqlString mA_PO_PHU_TRACHTmp = (SqlString)value;
				if(mA_PO_PHU_TRACHTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("MA_PO_PHU_TRACH", "MA_PO_PHU_TRACH can't be NULL");
				}
				_mA_PO_PHU_TRACH = value;
			}
		}


		public SqlString GHI_CHU2
		{
			get
			{
				return _gHI_CHU2;
			}
			set
			{
				SqlString gHI_CHU2Tmp = (SqlString)value;
				if(gHI_CHU2Tmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("GHI_CHU2", "GHI_CHU2 can't be NULL");
				}
				_gHI_CHU2 = value;
			}
		}


		public SqlString GHI_CHU3
		{
			get
			{
				return _gHI_CHU3;
			}
			set
			{
				SqlString gHI_CHU3Tmp = (SqlString)value;
				if(gHI_CHU3Tmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("GHI_CHU3", "GHI_CHU3 can't be NULL");
				}
				_gHI_CHU3 = value;
			}
		}


		public SqlString GHI_CHU4
		{
			get
			{
				return _gHI_CHU4;
			}
			set
			{
				SqlString gHI_CHU4Tmp = (SqlString)value;
				if(gHI_CHU4Tmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("GHI_CHU4", "GHI_CHU4 can't be NULL");
				}
				_gHI_CHU4 = value;
			}
		}


		public SqlString CO_SO_HD_YN
		{
			get
			{
				return _cO_SO_HD_YN;
			}
			set
			{
				SqlString cO_SO_HD_YNTmp = (SqlString)value;
				if(cO_SO_HD_YNTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("CO_SO_HD_YN", "CO_SO_HD_YN can't be NULL");
				}
				_cO_SO_HD_YN = value;
			}
		}
		#endregion
	}
}
